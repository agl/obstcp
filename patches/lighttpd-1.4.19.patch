diff --git a/config.h.in b/config.h.in
index 33347ba..45a2ed4 100644
--- a/config.h.in
+++ b/config.h.in
@@ -114,6 +114,9 @@
 /* Have libssl */
 #undef HAVE_LIBSSL
 
+/* Have libobstcp */
+#undef HAVE_OBSTCP
+
 /* libxml2 */
 #undef HAVE_LIBXML2
 
diff --git a/configure.in b/configure.in
index 2dcebac..8b481e9 100644
--- a/configure.in
+++ b/configure.in
@@ -199,6 +199,13 @@ if test "$WITH_VALGRIND" != "no"; then
  AC_CHECK_HEADERS([valgrind/valgrind.h])
 fi
 
+# Obfuscated TCP
+AC_CHECK_LIB(obstcp, obstcp_server_ctx_init, [
+  AC_CHECK_HEADERS([libobstcp.h],[
+    AC_DEFINE([HAVE_OBSTCP], [1]),
+    LDFLAGS="$LDFLAGS -lobstcp"
+  ])])
+
 dnl Check for openssl
 AC_MSG_CHECKING(for OpenSSL)
 AC_ARG_WITH(openssl,
diff --git a/src/Makefile.am b/src/Makefile.am
index a112789..108d8dc 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -47,7 +47,7 @@ common_src=buffer.c log.c \
       http-header-glue.c \
       network_write.c network_linux_sendfile.c \
       network_freebsd_sendfile.c network_writev.c \
-      network_solaris_sendfilev.c network_openssl.c \
+      network_solaris_sendfilev.c network_openssl.c network_obstcp.c \
       splaytree.c status_counter.c
 
 src = server.c response.c connections.c network.c \
diff --git a/src/base.h b/src/base.h
index acaf533..0577125 100644
--- a/src/base.h
+++ b/src/base.h
@@ -33,6 +33,11 @@
 # include <openssl/ssl.h>
 #endif
 
+#if defined HAVE_OBSTCP
+#define USE_OBSTCP
+#include <libobstcp.h>
+#endif
+
 #ifdef HAVE_FAM_H
 # include <fam.h>
 #endif
@@ -267,8 +272,13 @@ typedef struct {
 	buffer *ssl_cipher_list;
 	unsigned short ssl_use_sslv2;
 
+	// server wide
+	buffer *obs_privatekey_file;
+	buffer *obs_advert;
+
 	unsigned short use_ipv6;
 	unsigned short is_ssl;
+	unsigned short is_obs;
 	unsigned short allow_http11;
 	unsigned short etag_use_inode;
 	unsigned short etag_use_mtime;
@@ -416,6 +426,13 @@ typedef struct {
 	SSL *ssl;
 	buffer *ssl_error_want_reuse_buffer;
 #endif
+
+#ifdef USE_OBSTCP
+	struct obstcp_server_ctx obsctx;
+	struct obstcp_accum obsaccum;
+	struct obstcp_rbuf obsrbuf;
+#endif
+
 	/* etag handling */
 	etag_flags_t etag_flags;
 
@@ -509,12 +526,17 @@ typedef struct {
 	unsigned short ssl_use_sslv2;
 	unsigned short use_ipv6;
 	unsigned short is_ssl;
+	unsigned short is_obs;
 
 	buffer *srv_token;
 
 #ifdef USE_OPENSSL
 	SSL_CTX *ssl_ctx;
 #endif
+#ifdef USE_OBSTCP
+	struct obstcp_keys obs_keys;
+#endif
+
        unsigned short is_proxy_ssl;
 } server_socket;
 
@@ -623,6 +645,9 @@ typedef struct server {
 	int (* network_ssl_backend_write)(struct server *srv, connection *con, SSL *ssl, chunkqueue *cq);
 	int (* network_ssl_backend_read)(struct server *srv, connection *con, SSL *ssl, chunkqueue *cq);
 #endif
+#ifdef USE_OBSTCP
+	int (* network_obstcp_backend_write)(struct server *srv, connection *con, chunkqueue *cq);
+#endif
 
 	uid_t uid;
 	gid_t gid;
diff --git a/src/configfile.c b/src/configfile.c
index 09fe87d..0d82d32 100644
--- a/src/configfile.c
+++ b/src/configfile.c
@@ -92,6 +92,11 @@ static int config_insert(server *srv) {
 		{ "etag.use-inode",             NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER }, /* 48 */
 		{ "etag.use-mtime",             NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER }, /* 49 */
 		{ "etag.use-size",             NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER }, /* 50 */
+
+		{ "obstcp.privatekey-file",      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_SERVER },      /* 51 */
+		{ "obstcp.advert",               NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_SERVER },      /* 52 */
+		{ "obstcp.engine",               NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER },     /* 53 */
+
 		{ "server.host",                 "use server.bind instead", T_CONFIG_DEPRECATED, T_CONFIG_SCOPE_UNSET },
 		{ "server.docroot",              "use server.document-root instead", T_CONFIG_DEPRECATED, T_CONFIG_SCOPE_UNSET },
 		{ "server.virtual-root",         "load mod_simple_vhost and use simple-vhost.server-root instead", T_CONFIG_DEPRECATED, T_CONFIG_SCOPE_UNSET },
@@ -149,6 +154,8 @@ static int config_insert(server *srv) {
 		s->ssl_ca_file   = buffer_init();
 		s->error_handler = buffer_init();
 		s->server_tag    = buffer_init();
+		s->obs_privatekey_file = buffer_init();
+		s->obs_advert    = buffer_init();
 		s->ssl_cipher_list = buffer_init();
 		s->errorfile_prefix = buffer_init();
 		s->max_keep_alive_requests = 16;
@@ -157,6 +164,7 @@ static int config_insert(server *srv) {
 		s->max_write_idle = 360;
 		s->use_xattr     = 0;
 		s->is_ssl        = 0;
+		s->is_obs        = 0;
 		s->ssl_use_sslv2 = 1;
 		s->use_ipv6      = 0;
 #ifdef HAVE_LSTAT
@@ -215,6 +223,10 @@ static int config_insert(server *srv) {
 		cv[49].destination = &(s->etag_use_mtime);
 		cv[50].destination = &(s->etag_use_size);
 
+		cv[51].destination = s->obs_privatekey_file;
+		cv[52].destination = s->obs_advert;
+		cv[53].destination = &(s->is_obs);
+
 		srv->config_storage[i] = s;
 
 		if (0 != (ret = config_insert_values_global(srv, ((data_config *)srv->config_context->data[i])->value, cv))) {
@@ -291,6 +303,10 @@ int config_setup_connection(server *srv, connection *con) {
 	PATCH(etag_use_inode);
 	PATCH(etag_use_mtime);
 	PATCH(etag_use_size);
+
+	PATCH(is_obs);
+	PATCH(obs_privatekey_file);
+	PATCH(obs_advert);
  
 	return 0;
 }
@@ -351,6 +367,12 @@ int config_patch_connection(server *srv, connection *con, comp_key_t comp) {
 				PATCH(ssl_cipher_list);
 			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("ssl.engine"))) {
 				PATCH(is_ssl);
+			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("obstcp.privatekey-file"))) {
+				PATCH(obs_privatekey_file);
+			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("obstcp.advert"))) {
+				PATCH(obs_advert);
+			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("obstcp.engine"))) {
+				PATCH(is_obs);
 #ifdef HAVE_LSTAT
 			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("server.follow-symlink"))) {
 				PATCH(follow_symlink);
@@ -1245,5 +1267,20 @@ int config_set_defaults(server *srv) {
 #endif
 	}
 
+	if (s->is_obs) {
+		if (buffer_is_empty(s->obs_privatekey_file)) {
+			log_error_write(srv, __FILE__, __LINE__, "s",
+					"obstcp.privatekey-file must be set");
+			return -1;
+		}
+
+#ifndef USE_OBSTCP
+		log_error_write(srv, __FILE__, __LINE__, "s",
+				"Obfuscated TCP support is missing. Install libobstcp and recompile");
+
+		return -1;
+#endif
+	}
+
 	return 0;
 }
diff --git a/src/connections.c b/src/connections.c
index 184ecb9..fdebaeb 100644
--- a/src/connections.c
+++ b/src/connections.c
@@ -303,13 +303,43 @@ static int connection_handle_read_ssl(server *srv, connection *con) {
 #endif
 }
 
+static int connection_handle_read_obs(server *srv, connection *con) {
+	uint8_t temp[8193];
+
+	ssize_t n = obstcp_rbuf_read_fd(&con->obsrbuf, con->fd, temp, sizeof(temp) - 1);
+	if (n < 0) {
+		if (errno == EAGAIN) {
+			con->is_readable = 0;
+			return 0;
+		}
+		fprintf(stderr, "obs read failed %s\n", strerror(errno));
+		connection_set_state(srv, con, CON_STATE_ERROR);
+
+		return -1;
+	} else if (n == 0) {
+		con->is_readable = 0;
+		/* the other end close the connection -> KEEP-ALIVE */
+
+		return -2;
+	} else {
+		temp[n] = 0;
+		chunkqueue_append_mem(con->read_queue, temp, n + 1);
+		con->bytes_read += n;
+		return 0;
+	}
+}
+
 static int connection_handle_read(server *srv, connection *con) {
 	int len;
 	buffer *b;
 	int toread;
 
+	fprintf(stderr, "handle read: %d\n", con->conf.is_obs);
+
 	if (con->conf.is_ssl) {
 		return connection_handle_read_ssl(srv, con);
+	} else if (con->conf.is_obs) {
+		return connection_handle_read_obs(srv, con);
 	}
 
 #if defined(__WIN32)
@@ -586,6 +616,12 @@ static int connection_handle_write_prepare(server *srv, connection *con) {
 		}
 	}
 
+	if (!con->conf.is_obs && !buffer_is_empty(con->conf.obs_advert)) {
+		response_header_overwrite(srv, con, CONST_STR_LEN("X-ObsTCP-Advert"),
+					  con->conf.obs_advert->ptr,
+					  con->conf.obs_advert->used);
+	}
+
 	if (con->request.http_method == HTTP_METHOD_HEAD) {
 		/**
 		 * a HEAD request has the same as a GET 
@@ -855,6 +891,10 @@ int connection_reset(server *srv, connection *con) {
 	}
 #endif
 
+#ifdef USE_OBSTCP
+	obstcp_rbuf_free(&con->obsrbuf);
+#endif
+
 	con->header_len = 0;
 	con->in_error_handler = 0;
 
@@ -1355,6 +1395,15 @@ connection *connection_accept(server *srv, server_socket *srv_socket) {
 			}
 		}
 #endif
+
+#ifdef USE_OBSTCP
+		if (srv_socket->is_obs) {
+			obstcp_server_ctx_init(&con->obsctx, &srv_socket->obs_keys);
+			obstcp_server_accum_init(&con->obsaccum, &con->obsctx);
+			obstcp_rbuf_server_init(&con->obsrbuf, &con->obsctx);
+			con->conf.is_obs = 1;
+		}
+#endif
 		return con;
 	}
 }
@@ -1362,7 +1411,7 @@ connection *connection_accept(server *srv, server_socket *srv_socket) {
 
 int connection_state_machine(server *srv, connection *con) {
 	int done = 0, r;
-#ifdef USE_OPENSSL
+#if defined USE_OPENSSL || defined USE_OBSTCP
 	server_socket *srv_sock = con->srv_socket;
 #endif
 
@@ -1398,6 +1447,9 @@ int connection_state_machine(server *srv, connection *con) {
 			con->conf.is_ssl = srv_sock->is_ssl;
 #endif
 
+#ifdef USE_OBSTCP
+			con->conf.is_obs = srv_sock->is_obs;
+#endif
 			break;
 		case CON_STATE_REQUEST_END: /* transient */
 			if (srv->srvconf.log_state_handling) {
diff --git a/src/network.c b/src/network.c
index ba024aa..859b2be 100644
--- a/src/network.c
+++ b/src/network.c
@@ -396,6 +396,55 @@ int network_server_init(server *srv, buffer *host_token, specific_config *s) {
 
 		return -1;
 #endif
+	} else if (s->is_obs) {
+#ifdef USE_OBSTCP
+		/* Load the private key into the keyset */
+		struct stat st;
+		unsigned char buffer[32];
+
+		const int fd = open(s->obs_privatekey_file->ptr, O_RDONLY);
+		if (fd < 0) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+					"Failed to open private key file");
+			return -1;
+		}
+		if (fstat(fd, &st)) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+					"Failed to stat private key file");
+			close(fd);
+			return -1;
+		}
+		if (st.st_size != 32) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+					"Private key not 32 bytes long");
+			close(fd);
+			return -1;
+		}
+
+		ssize_t n;
+		do {
+			n = read(fd, buffer, sizeof(buffer));
+		} while (n == -1 && errno == EINTR);
+		close(fd);
+
+		if (n != sizeof(buffer)) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+					"Failed to read from private key file");
+			return -1;
+		}
+
+		obstcp_keys_init(&srv_socket->obs_keys);
+		if (!obstcp_keys_key_add(&srv_socket->obs_keys, buffer)) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+					"Failed to add key to keyset");
+			return -1;
+		}
+#else
+		log_error_write(srv, __FILE__, __LINE__, "ss", "OBS:",
+				"ObsTCP requested but libobstcp support is not compiled in");
+
+		return -1;
+#endif
 	} else {
 #ifdef SO_ACCEPTFILTER
 		/*
@@ -413,6 +462,7 @@ int network_server_init(server *srv, buffer *host_token, specific_config *s) {
 	}
 
 	srv_socket->is_ssl = s->is_ssl;
+	srv_socket->is_obs = s->is_obs;
 	srv_socket->fde_ndx = -1;
 
 	if (srv->srv_sockets.size == 0) {
@@ -505,6 +555,9 @@ int network_init(server *srv) {
 #ifdef USE_OPENSSL
 	srv->network_ssl_backend_write = network_write_chunkqueue_openssl;
 #endif
+#ifdef USE_OBSTCP
+	srv->network_obstcp_backend_write = network_write_chunkqueue_obstcp;
+#endif
 
 	/* get a usefull default */
 	backend = network_backends[0].nb;
@@ -639,6 +692,10 @@ int network_write_chunkqueue(server *srv, connection *con, chunkqueue *cq) {
 #ifdef USE_OPENSSL
 		ret = srv->network_ssl_backend_write(srv, con, con->ssl, cq);
 #endif
+	} else if (srv_socket->is_obs) {
+#ifdef USE_OBSTCP
+		ret = srv->network_obstcp_backend_write(srv, con, cq);
+#endif
 	} else {
 		ret = srv->network_backend_write(srv, con, con->fd, cq);
 	}
diff --git a/src/network_backends.h b/src/network_backends.h
index 3cb36af..879aa98 100644
--- a/src/network_backends.h
+++ b/src/network_backends.h
@@ -55,4 +55,8 @@ int network_write_chunkqueue_solarissendfilev(server *srv, connection *con, int
 int network_write_chunkqueue_openssl(server *srv, connection *con, SSL *ssl, chunkqueue *cq);
 #endif
 
+#ifdef USE_OBSTCP
+int network_write_chunkqueue_obstcp(server *srv, connection *con, chunkqueue *cq);
+#endif
+
 #endif
